Subject: [PATCH] SECURITY: Integer underflow in pointer validation.
Origin: https://github.com/sandstorm-io/capnproto/commit/e84ae6e395ba6e6e8616bd3d40f7a7d50ad5b5ed
From: Kenton Varda <kenton@sandstorm.io>
Bug-Debian: https://bugs.debian.org/780566
Forwarded: not-needed

--- a/src/capnp/layout.c++
+++ b/src/capnp/layout.c++
@@ -1437,6 +1437,7 @@
       WirePointer* ref, word* refTarget, SegmentBuilder* segment,
       const void* defaultValue, ByteCount defaultSize)) {
     if (ref->isNull()) {
+    useDefault:
       if (defaultSize == 0 * BYTES) {
         return nullptr;
       } else {
@@ -1446,14 +1447,19 @@
       }
     } else {
       word* ptr = followFars(ref, refTarget, segment);
+      char* cptr = reinterpret_cast<char*>(ptr);
 
       KJ_REQUIRE(ref->kind() == WirePointer::LIST,
           "Called getText{Field,Element}() but existing pointer is not a list.");
       KJ_REQUIRE(ref->listRef.elementSize() == FieldSize::BYTE,
           "Called getText{Field,Element}() but existing list pointer is not byte-sized.");
 
-      // Subtract 1 from the size for the NUL terminator.
-      return Text::Builder(reinterpret_cast<char*>(ptr), ref->listRef.elementCount() / ELEMENTS - 1);
+      size_t size = ref->listRef.elementCount() / ELEMENTS;
+      KJ_REQUIRE(size > 0 && cptr[size-1] == '\0', "Text blob missing NUL terminator.") {
+        goto useDefault;
+      }
+
+      return Text::Builder(cptr, size - 1);
     }
   }
 
